/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import ImageManagement.ImageIconCellRenderer;
import java.awt.Image;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import modelo.Pokemon;
import soundManagement.SoundPlayer;

/**
 *
 * @author F776
 */
public final class PokemonTable extends javax.swing.JFrame implements Serializable {

    private static final ArrayList<Pokemon> pokemon = MainWindow.getInstance().getPokemonArray();
    private static final HashMap<Integer, Integer[]> pokemonTyping = MainWindow.getInstance().getPokemonTyping();
    private static final HashMap<Integer, ImageIcon> listPokemonImage = MainWindow.getInstance().getPokemonImages();
    private static final HashMap<Integer, ImageIcon> listTypeImage = MainWindow.getInstance().getTypeImages();
    private boolean isTableFilled = false;
    private static PokemonTable instance;

    /**
     * Creates new form PokemonTable
     */
    public PokemonTable() {
        initComponents();
        if (!isTableFilled) {
            fillPkmnTbl();
            isTableFilled = true;
        }
        this.setLocationRelativeTo(null);
    }

    public static PokemonTable getInstance() {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPokemon = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pokémon Pokedex");
        setIconImage(MainWindow.getPokeballImage().getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tblPokemon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Pokémon", "Icon", "Type", "Secondary Type", "HP", "ATK", "DEF", "SPATK", "SPDEF", "SPD", "BST"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPokemon.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblPokemon);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        SoundPlayer.menuClosed();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable tblPokemon;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método llena la tabla tblMoves con todos los movimientos de la base
     * de datos. Se ejecuta al inicio del programa para poder ser consultada en
     * cualquier momento.
     */
    public static void fillPkmnTbl() {
        DefaultTableModel tbl = (DefaultTableModel) PokemonTable.tblPokemon.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tbl);
        PokemonTable.tblPokemon.setRowSorter(sorter);
        tbl.setRowCount(0);

        ImageIconCellRenderer renderer = new ImageIconCellRenderer();
        tblPokemon.getColumnModel().getColumn(2).setCellRenderer(renderer);
        tblPokemon.getColumnModel().getColumn(3).setCellRenderer(renderer);
        tblPokemon.getColumnModel().getColumn(4).setCellRenderer(renderer);

        for (Pokemon p : PokemonTable.pokemon) {
            ImageIcon[] types = setPokemonTyping(p);
            tbl.addRow(new Object[]{
                p.getId(), p.getName(), getPokemonSprite(p), types[0], types[1],
                p.getHp(), p.getAtk(), p.getDef(), p.getSpatk(), p.getSpdef(), p.getSpd(), p.getBst()
            });
        }
    }

    private static ImageIcon getPokemonSprite(Pokemon p) {

        int pokemonId = p.getId();

        if (listPokemonImage.containsKey(pokemonId)) {
            ImageIcon sprite = PokemonTable.listPokemonImage.get(pokemonId);
            Image img = sprite.getImage();
            Image resizedImg = img.getScaledInstance(33, 21, Image.SCALE_SMOOTH);
            sprite = new ImageIcon(resizedImg);
            return sprite;
        } else {
            return new ImageIcon(MainWindow.getPokeballImage().getImage().getScaledInstance(33, 21, Image.SCALE_SMOOTH));
        }
    }

    private static ImageIcon[] setPokemonTyping(Pokemon pkmn) {

        // PokemonId is obtenined from the Pokémon.
        int pokemonId = pkmn.getId();

        //ImageIcons are initialized
        ImageIcon t1 = null;
        ImageIcon t2 = new ImageIcon("src/images/s.png");

        Integer[] types = PokemonTable.pokemonTyping.get(pokemonId);
        if (types != null) {
            //Type1 and type2 obtained from each PokemonTyping object.
            int type1 = types[0];
            int type2 = types[1];

            // Get the scaled instance of the image 
            Image typeImage1 = PokemonTable.listTypeImage.get(type1).getImage().getScaledInstance(50, 10, Image.SCALE_SMOOTH);
            t1 = new ImageIcon(typeImage1);

            if (type2 != 0) {
                // Get the scaled instance of the image
                Image typeImage2 = PokemonTable.listTypeImage.get(type2).getImage().getScaledInstance(50, 10, Image.SCALE_SMOOTH);
                t2 = new ImageIcon(typeImage2);
            }
        }
        return new ImageIcon[]{t1, t2};
    }

    public javax.swing.JTable getTable() {
        return PokemonTable.tblPokemon;
    }

}
